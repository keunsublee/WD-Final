{"ast":null,"code":"var _jsxFileName = \"/Users/Annichka/WD-Final/client/src/components/containers/AllStudentsContainer.js\";\n/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Header from './Header';\nimport { fetchAllStudentsThunk, deleteStudentThunk } from '../../store/thunks';\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllStudentsContainer extends Component {\n  // Get all students data from the back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    const {\n      allStudents,\n      deleteStudent\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), allStudents.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No students available. Please add a new student.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.history.push(\"/add-student\"),\n          children: \"Add New Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: allStudents // Pass the fetched students data\n        ,\n        deleteStudent: deleteStudent // Pass the deleteStudent action\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Map Redux store state to props\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get all students from the Redux store state\n  };\n};\n\n// Map dispatch actions to props\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    // Dispatch thunk to fetch students data\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId)) // Dispatch thunk to delete a student\n  };\n};\n\n// Export the connected container by default\n// AllStudentsContainer is connected to the Redux store and re-renders when the store state changes\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["React","Component","connect","withRouter","Header","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","jsxDEV","_jsxDEV","AllStudentsContainer","componentDidMount","props","fetchAllStudents","render","allStudents","deleteStudent","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","history","push","students","mapState","state","mapDispatch","dispatch","studentId"],"sources":["/Users/Annichka/WD-Final/client/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Header from './Header';\nimport { \n  fetchAllStudentsThunk, \n  deleteStudentThunk \n} from '../../store/thunks'; \nimport AllStudentsView from '../views/AllStudentsView';\n\nclass AllStudentsContainer extends Component {\n  // Get all students data from the back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    const { allStudents, deleteStudent } = this.props;\n\n    return (\n      <div>\n        <Header />\n        {/* Display All Students view or a message if no students are available */}\n        {allStudents.length === 0 ? (\n          <div>\n            <p>No students available. Please add a new student.</p>\n            {/* Optionally, provide a link or button to navigate to Add Student page */}\n            <button onClick={() => this.props.history.push(\"/add-student\")}>\n              Add New Student\n            </button>\n          </div>\n        ) : (\n          <AllStudentsView\n            students={allStudents} // Pass the fetched students data\n            deleteStudent={deleteStudent} // Pass the deleteStudent action\n          />\n        )}\n      </div>\n    );\n  }\n}\n\n// Map Redux store state to props\nconst mapState = (state) => {\n  return {\n    allStudents: state.allStudents, // Get all students from the Redux store state\n  };\n};\n\n// Map dispatch actions to props\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()), // Dispatch thunk to fetch students data\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)), // Dispatch thunk to delete a student\n  };\n};\n\n// Export the connected container by default\n// AllStudentsContainer is connected to the Redux store and re-renders when the store state changes\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SACEC,qBAAqB,EACrBC,kBAAkB,QACb,oBAAoB;AAC3B,OAAOC,eAAe,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,oBAAoB,SAAST,SAAS,CAAC;EAC3C;EACAU,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC,WAAW;MAAEC;IAAc,CAAC,GAAG,IAAI,CAACJ,KAAK;IAEjD,oBACEH,OAAA;MAAAQ,QAAA,gBACER,OAAA,CAACL,MAAM;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAETN,WAAW,CAACO,MAAM,KAAK,CAAC,gBACvBb,OAAA;QAAAQ,QAAA,gBACER,OAAA;UAAAQ,QAAA,EAAG;QAAgD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAEvDZ,OAAA;UAAQc,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACX,KAAK,CAACY,OAAO,CAACC,IAAI,CAAC,cAAc,CAAE;UAAAR,QAAA,EAAC;QAEhE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,gBAENZ,OAAA,CAACF,eAAe;QACdmB,QAAQ,EAAEX,WAAY,CAAC;QAAA;QACvBC,aAAa,EAAEA,aAAc,CAAC;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;;AAEA;AACA,MAAMM,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLb,WAAW,EAAEa,KAAK,CAACb,WAAW,CAAE;EAClC,CAAC;AACH,CAAC;;AAED;AACA,MAAMc,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLjB,gBAAgB,EAAEA,CAAA,KAAMiB,QAAQ,CAACzB,qBAAqB,CAAC,CAAC,CAAC;IAAE;IAC3DW,aAAa,EAAGe,SAAS,IAAKD,QAAQ,CAACxB,kBAAkB,CAACyB,SAAS,CAAC,CAAC,CAAE;EACzE,CAAC;AACH,CAAC;;AAED;AACA;AACA,eAAe5B,UAAU,CAACD,OAAO,CAACyB,QAAQ,EAAEE,WAAW,CAAC,CAACnB,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}