{"ast":null,"code":"var _jsxFileName = \"/Users/Annichka/WD-Final/client/src/components/containers/AllCampusesContainer.js\";\n// ==================================================\n// /src/components/containers/AllCampusesContainer.js\n//\n// The Container component is responsible for stateful logic and data fetching, \n// and passes data (if any) as props to the corresponding View component. \n// If needed, it also defines the component's \"connect\" function.\n// ==================================================\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport Header from \"./Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Lifecycle method: Fetch all campuses data when the component mounts\n  componentDidMount() {\n    this.props.fetchAllCampuses(); // Fetch campuses from the backend when the component is mounted\n  }\n\n  // Render the All Campuses view, passing campuses data as props\n  render() {\n    const {\n      allCampuses,\n      deleteCampus\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: allCampuses,\n        deleteCampus: deleteCampus // Passing deleteCampus to handle deletion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Map Redux store state to props\nconst mapStateToProps = state => ({\n  allCampuses: state.allCampuses // Retrieve all campuses from the Redux store\n});\n\n// Map dispatch actions to props\nconst mapDispatchToProps = dispatch => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n  // Action to fetch campuses\n  deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)) // Action to delete a campus\n});\n\n// Type checking for props\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  // Ensure allCampuses is an array\n  fetchAllCampuses: PropTypes.func.isRequired,\n  // Ensure fetchAllCampuses is a function\n  deleteCampus: PropTypes.func.isRequired // Ensure deleteCampus is a function\n};\n\n// Export the connected container component\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampusesContainer);","map":{"version":3,"names":["React","Component","PropTypes","connect","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesView","Header","jsxDEV","_jsxDEV","AllCampusesContainer","componentDidMount","props","fetchAllCampuses","render","allCampuses","deleteCampus","children","fileName","_jsxFileName","lineNumber","columnNumber","mapStateToProps","state","mapDispatchToProps","dispatch","campusId","propTypes","array","isRequired","func"],"sources":["/Users/Annichka/WD-Final/client/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["// ==================================================\n// /src/components/containers/AllCampusesContainer.js\n//\n// The Container component is responsible for stateful logic and data fetching, \n// and passes data (if any) as props to the corresponding View component. \n// If needed, it also defines the component's \"connect\" function.\n// ==================================================\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport Header from \"./Header\";\n\nclass AllCampusesContainer extends Component {\n  // Lifecycle method: Fetch all campuses data when the component mounts\n  componentDidMount() {\n    this.props.fetchAllCampuses(); // Fetch campuses from the backend when the component is mounted\n  }\n\n  // Render the All Campuses view, passing campuses data as props\n  render() {\n    const { allCampuses, deleteCampus } = this.props;\n\n    return (\n      <div>\n        <Header />\n        <AllCampusesView \n          allCampuses={allCampuses} \n          deleteCampus={deleteCampus} // Passing deleteCampus to handle deletion\n        />\n      </div>\n    );\n  }\n}\n\n// Map Redux store state to props\nconst mapStateToProps = (state) => ({\n  allCampuses: state.allCampuses, // Retrieve all campuses from the Redux store\n});\n\n// Map dispatch actions to props\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()), // Action to fetch campuses\n  deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)), // Action to delete a campus\n});\n\n// Type checking for props\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired, // Ensure allCampuses is an array\n  fetchAllCampuses: PropTypes.func.isRequired, // Ensure fetchAllCampuses is a function\n  deleteCampus: PropTypes.func.isRequired, // Ensure deleteCampus is a function\n};\n\n// Export the connected container component\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampusesContainer);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,qBAAqB,EAAEC,iBAAiB,QAAQ,oBAAoB;AAC7E,SAASC,eAAe,QAAQ,UAAU;AAC1C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,oBAAoB,SAAST,SAAS,CAAC;EAC3C;EACAU,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACjC;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC,WAAW;MAAEC;IAAa,CAAC,GAAG,IAAI,CAACJ,KAAK;IAEhD,oBACEH,OAAA;MAAAQ,QAAA,gBACER,OAAA,CAACF,MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVZ,OAAA,CAACH,eAAe;QACdS,WAAW,EAAEA,WAAY;QACzBC,YAAY,EAAEA,YAAa,CAAC;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAEA;AACA,MAAMC,eAAe,GAAIC,KAAK,KAAM;EAClCR,WAAW,EAAEQ,KAAK,CAACR,WAAW,CAAE;AAClC,CAAC,CAAC;;AAEF;AACA,MAAMS,kBAAkB,GAAIC,QAAQ,KAAM;EACxCZ,gBAAgB,EAAEA,CAAA,KAAMY,QAAQ,CAACrB,qBAAqB,CAAC,CAAC,CAAC;EAAE;EAC3DY,YAAY,EAAGU,QAAQ,IAAKD,QAAQ,CAACpB,iBAAiB,CAACqB,QAAQ,CAAC,CAAC,CAAE;AACrE,CAAC,CAAC;;AAEF;AACAhB,oBAAoB,CAACiB,SAAS,GAAG;EAC/BZ,WAAW,EAAEb,SAAS,CAAC0B,KAAK,CAACC,UAAU;EAAE;EACzChB,gBAAgB,EAAEX,SAAS,CAAC4B,IAAI,CAACD,UAAU;EAAE;EAC7Cb,YAAY,EAAEd,SAAS,CAAC4B,IAAI,CAACD,UAAU,CAAE;AAC3C,CAAC;;AAED;AACA,eAAe1B,OAAO,CAACmB,eAAe,EAAEE,kBAAkB,CAAC,CAACd,oBAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}