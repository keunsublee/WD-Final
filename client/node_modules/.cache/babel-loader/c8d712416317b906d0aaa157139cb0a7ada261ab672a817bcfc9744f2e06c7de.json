{"ast":null,"code":"var _jsxFileName = \"/Users/Annichka/WD-Final/client/src/components/containers/CampusContainer.js\";\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      // Initialize loading state\n      error: null // Initialize error state\n    };\n  }\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id).then(() => {\n      this.setState({\n        loading: false\n      }); // Set loading to false once data is fetched\n    }).catch(error => {\n      this.setState({\n        loading: false,\n        error: error.message\n      }); // Set error state if there's an issue\n    });\n  }\n  render() {\n    const {\n      campus\n    } = this.props;\n    const {\n      loading,\n      error\n    } = this.state;\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this); // Show loading indicator while fetching data\n    }\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, this); // Show error message if there's a fetch error\n    }\n    if (!campus) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No campus data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this); // Show message if campus data is missing\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The \"mapState\" argument specifies the data from Redux Store that the component needs\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n};\n\n// Export store-connected container by default\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","CampusView","jsxDEV","_jsxDEV","CampusContainer","constructor","args","state","loading","error","componentDidMount","props","fetchCampus","match","params","id","then","setState","catch","message","render","campus","children","fileName","_jsxFileName","lineNumber","columnNumber","mapState","mapDispatch","dispatch"],"sources":["/Users/Annichka/WD-Final/client/src/components/containers/CampusContainer.js"],"sourcesContent":["import Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  state = {\n    loading: true, // Initialize loading state\n    error: null,   // Initialize error state\n  };\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id)\n      .then(() => {\n        this.setState({ loading: false }); // Set loading to false once data is fetched\n      })\n      .catch((error) => {\n        this.setState({ loading: false, error: error.message }); // Set error state if there's an issue\n      });\n  }\n\n  render() {\n    const { campus } = this.props;\n    const { loading, error } = this.state;\n\n    if (loading) {\n      return <div>Loading...</div>; // Show loading indicator while fetching data\n    }\n\n    if (error) {\n      return <div>Error: {error}</div>; // Show error message if there's a fetch error\n    }\n\n    if (!campus) {\n      return <div>No campus data available</div>; // Show message if campus data is missing\n    }\n\n    return (\n      <div>\n        <Header />\n        <CampusView campus={campus} />\n      </div>\n    );\n  }\n}\n\n// The \"mapState\" argument specifies the data from Redux Store that the component needs\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  };\n};\n\n// Export store-connected container by default\nexport default connect(mapState, mapDispatch)(CampusContainer);\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,SAASN,SAAS,CAAC;EAAAO,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACtCC,KAAK,GAAG;MACNC,OAAO,EAAE,IAAI;MAAE;MACfC,KAAK,EAAE,IAAI,CAAI;IACjB,CAAC;EAAA;EAEDC,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC,CAC/CC,IAAI,CAAC,MAAM;MACV,IAAI,CAACC,QAAQ,CAAC;QAAET,OAAO,EAAE;MAAM,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,IAAK;MAChB,IAAI,CAACQ,QAAQ,CAAC;QAAET,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACU;MAAQ,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC;EACN;EAEAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC;IAAO,CAAC,GAAG,IAAI,CAACV,KAAK;IAC7B,MAAM;MAAEH,OAAO;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACF,KAAK;IAErC,IAAIC,OAAO,EAAE;MACX,oBAAOL,OAAA;QAAAmB,QAAA,EAAK;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,CAAC,CAAC;IAChC;IAEA,IAAIjB,KAAK,EAAE;MACT,oBAAON,OAAA;QAAAmB,QAAA,GAAK,SAAO,EAACb,KAAK;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,CAAC,CAAC;IACpC;IAEA,IAAI,CAACL,MAAM,EAAE;MACX,oBAAOlB,OAAA;QAAAmB,QAAA,EAAK;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,CAAC,CAAC;IAC9C;IAEA,oBACEvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA,CAACP,MAAM;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVvB,OAAA,CAACF,UAAU;QAACoB,MAAM,EAAEA;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EAEV;AACF;;AAEA;AACA,MAAMC,QAAQ,GAAIpB,KAAK,IAAK;EAC1B,OAAO;IACLc,MAAM,EAAEd,KAAK,CAACc,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;;AAED;AACA,MAAMO,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLjB,WAAW,EAAGG,EAAE,IAAKc,QAAQ,CAAC7B,gBAAgB,CAACe,EAAE,CAAC;EACpD,CAAC;AACH,CAAC;;AAED;AACA,eAAehB,OAAO,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,CAACxB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}