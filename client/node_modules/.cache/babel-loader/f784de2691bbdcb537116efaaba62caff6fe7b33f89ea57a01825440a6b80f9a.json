{"ast":null,"code":"var _jsxFileName = \"/Users/Annichka/WD-Final/client/src/components/containers/AllCampusesContainer.js\";\n/// ==================================================\n// /src/components/containers/AllCampusesContainer.js\n//\n// The Container component is responsible for stateful logic and data fetching, \n// and passes data (if any) as props to the corresponding View component. \n// If needed, it also defines the component's \"connect\" function.\n// ==================================================\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport Header from \"./Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Lifecycle method: Fetch all campuses data when the component mounts\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Render the All Campuses view, passing campuses data as props\n  render() {\n    const {\n      allCampuses\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Map Redux store state to props\nconst mapStateToProps = state => ({\n  allCampuses: state.allCampuses // Retrieve all campuses from the Redux store\n});\n\n// Map dispatch actions to props\nconst mapDispatchToProps = dispatch => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n});\n\n// Type checking for props\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n};\n\n// Export the connected container component\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampusesContainer);","map":{"version":3,"names":["React","Component","PropTypes","connect","fetchAllCampusesThunk","AllCampusesView","Header","jsxDEV","_jsxDEV","AllCampusesContainer","componentDidMount","props","fetchAllCampuses","render","allCampuses","children","fileName","_jsxFileName","lineNumber","columnNumber","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","array","isRequired","func"],"sources":["/Users/Annichka/WD-Final/client/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/// ==================================================\n// /src/components/containers/AllCampusesContainer.js\n//\n// The Container component is responsible for stateful logic and data fetching, \n// and passes data (if any) as props to the corresponding View component. \n// If needed, it also defines the component's \"connect\" function.\n// ==================================================\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport Header from \"./Header\";\n\nclass AllCampusesContainer extends Component {\n  // Lifecycle method: Fetch all campuses data when the component mounts\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Render the All Campuses view, passing campuses data as props\n  render() {\n    const { allCampuses } = this.props;\n\n    return (\n      <div>\n        <Header />\n        <AllCampusesView allCampuses={allCampuses} />\n      </div>\n    );\n  }\n}\n\n// Map Redux store state to props\nconst mapStateToProps = (state) => ({\n  allCampuses: state.allCampuses, // Retrieve all campuses from the Redux store\n});\n\n// Map dispatch actions to props\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n});\n\n// Type checking for props\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired,\n};\n\n// Export the connected container component\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampusesContainer);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,eAAe,QAAQ,UAAU;AAC1C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,oBAAoB,SAASR,SAAS,CAAC;EAC3C;EACAS,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC;IAAY,CAAC,GAAG,IAAI,CAACH,KAAK;IAElC,oBACEH,OAAA;MAAAO,QAAA,gBACEP,OAAA,CAACF,MAAM;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVX,OAAA,CAACH,eAAe;QAACS,WAAW,EAAEA;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAEV;AACF;;AAEA;AACA,MAAMC,eAAe,GAAIC,KAAK,KAAM;EAClCP,WAAW,EAAEO,KAAK,CAACP,WAAW,CAAE;AAClC,CAAC,CAAC;;AAEF;AACA,MAAMQ,kBAAkB,GAAIC,QAAQ,KAAM;EACxCX,gBAAgB,EAAEA,CAAA,KAAMW,QAAQ,CAACnB,qBAAqB,CAAC,CAAC;AAC1D,CAAC,CAAC;;AAEF;AACAK,oBAAoB,CAACe,SAAS,GAAG;EAC/BV,WAAW,EAAEZ,SAAS,CAACuB,KAAK,CAACC,UAAU;EACvCd,gBAAgB,EAAEV,SAAS,CAACyB,IAAI,CAACD;AACnC,CAAC;;AAED;AACA,eAAevB,OAAO,CAACiB,eAAe,EAAEE,kBAAkB,CAAC,CAACb,oBAAoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}