{"ast":null,"code":"var _jsxFileName = \"/Users/Annichka/WD-Final/client/src/components/containers/AllStudentsContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { fetchAllStudentsThunk, deleteStudentThunk } from '../../store/thunks';\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllStudentsContainer extends Component {\n  componentDidMount() {\n    this.props.fetchAllStudents(); // Fetch all students when the component mounts\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: this.props.allStudents // Pass students to the view\n        ,\n        deleteStudent: this.props.deleteStudent // Pass delete function to the view\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId))\n  };\n};\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["Header","Component","connect","withRouter","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","jsxDEV","_jsxDEV","AllStudentsContainer","componentDidMount","props","fetchAllStudents","render","children","fileName","_jsxFileName","lineNumber","columnNumber","students","allStudents","deleteStudent","mapState","state","mapDispatch","dispatch","studentId"],"sources":["/Users/Annichka/WD-Final/client/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["import Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\n\nimport { \n  fetchAllStudentsThunk,\n  deleteStudentThunk\n} from '../../store/thunks';\n\nimport AllStudentsView from '../views/AllStudentsView';\n\nclass AllStudentsContainer extends Component {\n  componentDidMount() {\n    this.props.fetchAllStudents();  // Fetch all students when the component mounts\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <AllStudentsView \n          students={this.props.allStudents}  // Pass students to the view\n          deleteStudent={this.props.deleteStudent}  // Pass delete function to the view\n        />\n      </div>\n    );\n  }\n}\n\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = (state) => {\n  return {\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\n  };\n};\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SACEC,qBAAqB,EACrBC,kBAAkB,QACb,oBAAoB;AAE3B,OAAOC,eAAe,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,oBAAoB,SAASR,SAAS,CAAC;EAC3CS,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAE;EAClC;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACEL,OAAA;MAAAM,QAAA,gBACEN,OAAA,CAACR,MAAM;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVV,OAAA,CAACF,eAAe;QACda,QAAQ,EAAE,IAAI,CAACR,KAAK,CAACS,WAAY,CAAE;QAAA;QACnCC,aAAa,EAAE,IAAI,CAACV,KAAK,CAACU,aAAc,CAAE;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAGA;AACA;AACA;AACA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMI,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLb,gBAAgB,EAAEA,CAAA,KAAMa,QAAQ,CAACrB,qBAAqB,CAAC,CAAC,CAAC;IACzDiB,aAAa,EAAGK,SAAS,IAAKD,QAAQ,CAACpB,kBAAkB,CAACqB,SAAS,CAAC;EACtE,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAevB,UAAU,CAACD,OAAO,CAACoB,QAAQ,EAAEE,WAAW,CAAC,CAACf,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}